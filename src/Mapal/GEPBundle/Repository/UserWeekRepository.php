<?php

namespace Mapal\GEPBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Mapal\GEPBundle\Entity\UserWeek;
use Mapal\GEPBundle\Entity\User;
use Mapal\GEPBundle\Entity\Week;
use Mapal\GEPBundle\Entity\Status;

/**
 * UserWeekRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserWeekRepository extends EntityRepository{
	
	public function saveOrUpdate(UserWeek $userWeek){

		$em = $this->getEntityManager();
		$em->persist($userWeek);
		$em->flush();
		
	}
	
	public function remove(UserWeek $userWeek){
	
		$em = $this->getEntityManager();
		$entity = $em->merge($userWeek);
		$em->remove($entity);
		$em->flush();
	
	}
	
	public function findComplex(UserWeek $userWeek){
	
		$userWeekResponse =null;
	
		try{
	
			$result = $this->getEntityManager()->createQuery(
					"SELECT uw ".
					"FROM MapalGEPBundle:".UserWeek::$ENTITY_NAME." uw ".
					"JOIN uw.".UserWeek::$FIELD_NAME_USER." u ".
					"JOIN uw.".UserWeek::$FIELD_NAME_WEEK." w ".
					"JOIN uw.".UserWeek::$FIELD_NAME_STATUS." s ".
					"WHERE u.".User::$FIELD_NAME_ID." = :idUser ".
					"AND w.".Week::$FIELD_NAME_ID." = :idWeek ".
					"AND s.".Status::$FIELD_NAME_ID." = :idStatus "
			)
			->setParameter('idUser', $userWeek->getIdUser()->getId())
			->setParameter('idWeek', $userWeek->getIdWeek()->getId())
			->setParameter('idStatus', $userWeek->getIdStatus()->getId())
			->getResult();
	
			if (count($result)){
				$userWeekResponse = $result[0];
			}
	
		}catch ( Exeption $e ){
	
		}
			
		return $userWeekResponse;
	
	}
	
	public function findWithUserAndWithYear(User $user, $year){
		
		$lstUserWeek = array();
		
		try{
		
			$result = $this->getEntityManager()->createQuery(
					"SELECT uw ".
					"FROM MapalGEPBundle:".UserWeek::$ENTITY_NAME." uw ".
					"JOIN uw.".UserWeek::$FIELD_NAME_USER." u ".
					"JOIN uw.".UserWeek::$FIELD_NAME_WEEK." w ".
					"WHERE u.".User::$FIELD_NAME_ID." = :id ".
					"AND w.".Week::$FIELD_NAME_YEAR." = :year "
			)
			->setParameter('id', $user->getId())
			->setParameter('year', $year)
			->getResult();
		
			$lstUserWeek = $result;
		
		}catch ( Exeption $e ){
		
		}
			
		return $lstUserWeek;
		
	}
	
}